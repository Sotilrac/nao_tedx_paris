<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="RightBumperPressed desc" id="4" />
        <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="LeftBumperPressed desc" id="5" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Presentation" id="1" localization="8" tooltip="" x="111" y="22">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ses = self.Session()
        self.anim_speech = self.ses.service('ALAnimatedSpeech')
        self.daps = self.ses.service('ALAnimatedSpeech')
        self.content = """One of my favorite activities is to assist teachers in special education classrooms. The kids we work with are extraordinary and often have a beautiful hidden talent. What I like the most is when we discover it together. You see, most children with autism are attracted to technology so they are curious to work with me. We play interactive games  [animation] to learn about turn taking, work on our memory, sing songs [dance animation] and even move-on to counting numbers or spelling words. (such as / for example: T-E-D-X) [arms open to the sky animation? laugh, applaud etc] As a robot, I can be quite patient and do the same task over and over again for as many times as a child needs. This brings comfort to the kids, keeping them engaged when exploring new topics. We have so much fun learning together. Isn't it the best to have a robot sidekick growing up? [laugh] Am I right?"""

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.anim_speech.say(self.content)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Perform Prop" id="2" localization="8" tooltip="Initiate props proactively" x="277" y="22">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.s =  self.session()
        self.memory = self.s.service('ALMemory')
        self.tts = self.s.service('ALTextToSpeech')
        self.daps = self.s.service('Daps')
        self.be_man = self.s.service('ALBehaviorManager')

        ## Memory subscriptions

        self.subscriptions = {'Daps/InProgress':'stop_behavior',
                              'Daps/Warning':'perfom_warning',
                              'Daps/Success':'perfom_success',
                              'Daps/Failure':'perfom_failure'}

        self.subscribe_events()


    def onUnload(self):

        for subs in self.subscriptions.keys():
            try:
                self.memory.unsubscribeToEvent(subs, self.getName())
            except RuntimeError as e:
                self.logger.debug('Error unsubscribing form ALMemory event: %s' % e)

    def onInput_onStart(self):

        self.tts.say(self.getParameter('Initial message'))
        self.daps.dap(self.getParameter('Dap type'),
                  self.getParameter('Warning timeout'),
                  self.getParameter('Failure timeout'))

    def stop_behavior(self, key, value, message):
        if value == 0:
            self.onInput_onStop()

    def perfom_warning(self, key, value, message):
        self.tts.say(self.getParameter('Warning message'))

    def perfom_failure(self, key, value, message):
        self.tts.say(self.getParameter('Failure message'))

    def perfom_success(self, key, value, message):
        if self.getParameter('Play sound'):
            self.be_man.runBehavior('daps/animations/boom_sound')
        self.tts.say(self.getParameter('Success message'))


    def subscribe_events(self):
        for subs in self.subscriptions.iteritems():
            self.memory.subscribeToEvent(subs[0], self.getName(), subs[1])

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="Dap type" inherits_from_parent="0" content_type="3" value="rfistbump" default_value="llowfive" custom_choice="0" tooltip="" id="5">
                                <Choice value="rhandshake" />
                                <Choice value="lhandshake" />
                                <Choice value="rfistbump" />
                                <Choice value="lfistbump" />
                                <Choice value="rhighfive" />
                                <Choice value="lhighfive" />
                                <Choice value="rlowfive" />
                                <Choice value="llowfive" />
                            </Parameter>
                            <Parameter name="Warning message" inherits_from_parent="0" content_type="3" value="Don&apos;t leave me hanging" default_value="Don&apos;t leave me hanging" custom_choice="0" tooltip="" id="6" />
                            <Parameter name="Failure message" inherits_from_parent="0" content_type="3" value="I see how it is" default_value="I see how it is" custom_choice="0" tooltip="" id="7" />
                            <Parameter name="Play sound" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="8" />
                            <Parameter name="Initial message" inherits_from_parent="0" content_type="3" value="Bump it sis" default_value="Hello" custom_choice="0" tooltip="" id="9" />
                            <Parameter name="Success message" inherits_from_parent="0" content_type="3" value="Nicely done" default_value="Awesome" custom_choice="0" tooltip="" id="10" />
                            <Parameter name="Warning timeout" inherits_from_parent="0" content_type="1" value="8" default_value="10" min="0" max="60" tooltip="Dissabled if 0" id="11" />
                            <Parameter name="Failure timeout" inherits_from_parent="0" content_type="1" value="25" default_value="30" min="0" max="100" tooltip="disabled if 0" id="12" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
